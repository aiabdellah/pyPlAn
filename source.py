import argparse
from scutils.argparse_helper import ArgparseHelper
if __name__=="__main__":
    parser=argparse.ArgumentParser( description='pyPlAn: python based Ploter of annotation files.this tool is developed by AIA for making meta_annotaion easy to analyse.\n For TSV file (generated by Humann) pyPlAn can generate plots for all classified Genus and Function,\n for gff files (generated by Prodigal) pyPlAn can generate plots for frequency of eache species and genus.', add_help=False)
    parser.add_argument('-h', '--help', action=ArgparseHelper,help='show this help message and exit')
    parser.add_argument("-I","--input",required=True, help="The input file")
    parser.add_argument("-O","--outdir", required=True,help="The output directory")
    parser.add_argument('-V',"--verbose", help="increase output verbosity",action="store_true")
    args=parser.parse_args()
    input1 = args.input
    outdir = args.outdir


    #importing section
    import os
    import matplotlib.pyplot as plt
    import matplotlib
    import numpy as np
    import collections
    import pandas as pd
    import matplotlib.ticker as ticker
    from matplotlib.ticker import FuncFormatter
    from matplotlib import gridspec as gsp
    #_________________________________________________________________________________________________
    #def section
    def readfile(file):
        filelist=[]
        with open(file,'r') as f:
            while True:
                a=f.readline().rstrip()
                filelist.append(a)
                if len(a)==0:
                    break
        return(filelist)
    def sorting(list):
        sorted=[]
        for i in list:
            if 'UniRef' in i:
                if 'unknown' not in i:
                    if '|' in i:
                        if ':' in i:
                            a = i.split(':')[1].split('|')
                            if len(a) > 1:

                                biofunc=''
                                parts = [a[0].replace('Fragment','').replace('()','').strip(' ').strip('')[i:i+12] for i in range(0, len(a[0]), 12)]
                                for i in parts:
                                    if len(i)>0:
                                        biofunc=biofunc+i+'-\n'
                                if 'g_' in a[1]:
                                    genus=a[1].split('\t')[0].replace('g__','')
                                elif 'unclassified' in a[1]:
                                    genus='unclassified'
                                abundance=float(a[1].split('\t')[1])
                                sorted.append([genus,biofunc.rstrip('-\n'),abundance])
        return(sorted)
    def getsp(liste):
        speachies=[]
        listp={}
        for i in liste:
            if '# Model Data'in i:
                mod=i
                a = mod.split('|')[1].split('_')
                if len(a)>= 3 and a[2][0].isupper()==False:
                    name = a[0]+' '+a[1]+' '+a[2]
                else:
                    name = a[0]+' '+a[1]
                speachies.append(name)

        ssp = set(speachies)
        dlist={}
        for i in ssp:
            # freq[i]=((speachies.count(i))/len(speachies))*100
            dlist[i]=(speachies.count(i)/len(speachies))*100
        a1_sorted = sorted(dlist, key=dlist.get, reverse=True)
        freq={}
        for i in a1_sorted:
            freq[i]=dlist[i]
        genu=[]
        for i in speachies:
            genu.append(i.split(" ")[0])
        ggn=set(genu)
        gcou={}
        for i in ggn:
            gcou[i]=(genu.count(i)/len(genu))*100
        a2_sorted = sorted(gcou, key=gcou.get, reverse=True)
        freqg={}
        for i in a2_sorted:
            freqg[i]=gcou[i]
        return(freq,freqg)

    #main section
    if args.verbose:
        filename, file_extension = os.path.splitext(input1)
        if file_extension == '.tsv':
            outname = outdir.rstrip('/')+'/'+filename.split('/')[-1]+'/'
            funcdir=outname+'Function'
            genusdir=outname+'Genus'
            print('Creating output directories')
            os.mkdir(outname)
            os.mkdir(funcdir)
            os.mkdir(genusdir)
            print('Reading file\n','Input:',input1,'\n Output directory:',outdir)
            file_countent = sorting(readfile(input1))
            print('Arranging data')
            file_data_frame=pd.DataFrame(data=file_countent,columns=['Genus','Function','Abundance'])
            genus_group = file_data_frame.groupby(['Genus'])
            function_group = file_data_frame.groupby(['Function'])
            print('Start ploting TSV genus')
            counting=0
            unclacoutnig=0
            for name,group in genus_group:
                if name != 'unclassified':
                    counting=counting+len(group)
                else:
                    unclacoutnig=unclacoutnig+len(group)
                print('Ploting',name,':',len(group),'Biological function generated')
                fig = plt.figure(figsize=(50,10))
                ax = plt.axes()
                datakeeped=group.drop_duplicates('Function')
                datakeeped.plot.bar(x='Function',y='Abundance',width=0.1,color="r",ax=ax,rot=0)
                plt.tight_layout(h_pad=0.8,w_pad=0)
                plt.title(name,fontsize= 40)
                matplotlib.rcParams['savefig.pad_inches'] = 0
                plt.tight_layout(h_pad=0.8,w_pad=0)
                plt.autoscale(tight=True)
                plt.savefig(genusdir.rstrip('/')+'/'+name.replace('\n','_').replace('/',"_")+'.png')
                plt.close('all')
            print('Start ploting TSV functions')
            for name,group in function_group:
                print('Ploting',name,':',len(group),'resposibles genus generated')
                fig = plt.figure(figsize=(20,9))
                ax = plt.axes()
                datakeeped=group.drop_duplicates('Function')
                datakeeped.plot.bar(x='Genus',y='Abundance',width=0.01,ax=ax,color="r",rot=0)
                plt.title(name,fontsize= 40)
                ax.get_xaxis().set_visible(True)
                ax.get_yaxis().set_visible(True)
                plt.tight_layout(h_pad=0.5,w_pad=0)
                matplotlib.rcParams['savefig.pad_inches'] = 0
                plt.autoscale(tight=True)
                plt.savefig(funcdir.rstrip('/')+'/'+name.replace('\n','_').replace('/','_')+'.png')
                plt.close('all')
            print('Classified functions:',counting,'\nUnclassified function:',unclacoutnig)
        elif file_extension == '.gff':
            filename, file_extension = os.path.splitext(input1)
            outname = outdir.rstrip('/')+'/'+filename.split('/')[-1]+'/'
            print('Creating output directory')
            os.mkdir(outname)
            print('Reading file\nInput:',input1,'\nOutput directory:',outdir)
            file1=readfile(input1)
            splist,genlist=getsp(file1)
            genuses=[]
            genus_frequency=[]
            species=[]
            species_frequency=[]
            for k,v in splist.items():
                species.append(k)
                species_frequency.append(v)
            for k,v in genlist.items():
                genuses.append(k)
                genus_frequency.append(v)
            print('Arranging data')
            species_data_frame=pd.DataFrame({'Species':species,'Frequency':species_frequency})
            genus_data_frame=pd.DataFrame({'Genus':genuses,'Frequency':genus_frequency})
            print("Ploting genus")
            ax1=genus_data_frame.plot.bar(x='Genus',y='Frequency',width=0.2)
            formatter = FuncFormatter(lambda y, pos: "%d%%" % (y))
            ax1.yaxis.set_major_formatter(formatter)
            plt.tight_layout(h_pad=0,w_pad=0.3)
            plt.savefig(outname+filename.split('/')[-1]+'genus.png')
            print('Ploting species')
            ax=species_data_frame.plot.bar(x='Species',y='Frequency',width=0.2,fontsize=8)
            formatter = FuncFormatter(lambda y, pos: "%d%%" % (y))
            ax.yaxis.set_major_formatter(formatter)
            plt.tight_layout(h_pad=0,w_pad=0.3)
            plt.savefig(outname+filename.split('/')[-1]+'sp.png')
    else:
        filename, file_extension = os.path.splitext(input1)
        if file_extension == '.tsv':
            outname = outdir.rstrip('/')+'/'+filename.split('/')[-1]+'/'
            funcdir=outname+'Function'
            genusdir=outname+'Genus'
            os.mkdir(outname)
            os.mkdir(funcdir)
            os.mkdir(genusdir)
            file_countent = sorting(readfile(input1))
            file_data_frame=pd.DataFrame(data=file_countent,columns=['Genus','Function','Abundance'])
            genus_group = file_data_frame.groupby(['Genus'])
            function_group = file_data_frame.groupby(['Function'])
            for name,group in genus_group:
                fig = plt.figure(figsize=(50,10))
                ax = plt.axes()
                datakeeped=group.drop_duplicates('Function')
                datakeeped.plot.bar(x='Function',y='Abundance',width=0.1,color="r",ax=ax,rot=0)
                plt.tight_layout(h_pad=0.8,w_pad=0)
                plt.title(name,fontsize= 40)
                matplotlib.rcParams['savefig.pad_inches'] = 0
                plt.tight_layout(h_pad=0.8,w_pad=0)
                plt.autoscale(tight=True)
                plt.savefig(genusdir.rstrip('/')+'/'+name.replace('\n','_').replace('/',"_")+'.png')
                plt.close('all')
            for name,group in function_group:
                fig = plt.figure(figsize=(20,9))
                ax = plt.axes()
                datakeeped=group.drop_duplicates('Function')
                datakeeped.plot.bar(x='Genus',y='Abundance',width=0.01,ax=ax,color="r",rot=0)
                plt.title(name,fontsize= 40)
                ax.get_xaxis().set_visible(True)
                ax.get_yaxis().set_visible(True)
                plt.tight_layout(h_pad=0.5,w_pad=0)
                matplotlib.rcParams['savefig.pad_inches'] = 0
                plt.autoscale(tight=True)
                plt.savefig(funcdir.rstrip('/')+'/'+name.replace('\n','_').replace('/','_')+'.png')
                plt.close('all')
        elif file_extension == '.gff':
            filename, file_extension = os.path.splitext(input1)
            outname = outdir.rstrip('/')+'/'+filename.split('/')[-1]+'/'
            os.mkdir(outname)
            file1=readfile(input1)
            splist,genlist=getsp(file1)
            genuses=[]
            genus_frequency=[]
            species=[]
            species_frequency=[]
            for k,v in splist.items():
                species.append(k)
                species_frequency.append(v)
            for k,v in genlist.items():
                genuses.append(k)
                genus_frequency.append(v)
            species_data_frame=pd.DataFrame({'Species':species,'Frequency':species_frequency})
            genus_data_frame=pd.DataFrame({'Genus':genuses,'Frequency':genus_frequency})
            ax1=genus_data_frame.plot.bar(x='Genus',y='Frequency',width=0.2)
            formatter = FuncFormatter(lambda y, pos: "%d%%" % (y))
            ax1.yaxis.set_major_formatter(formatter)
            plt.tight_layout(h_pad=0,w_pad=0.3)
            plt.savefig(outname+filename.split('/')[-1]+'genus.png')
            ax=species_data_frame.plot.bar(x='Species',y='Frequency',width=0.2,fontsize=8)
            formatter = FuncFormatter(lambda y, pos: "%d%%" % (y))
            ax.yaxis.set_major_formatter(formatter)
            plt.tight_layout(h_pad=0,w_pad=0.3)
            plt.savefig(outname+filename.split('/')[-1]+'sp.png')
